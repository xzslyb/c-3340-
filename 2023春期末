#include<bits/stdc++.h>
#include<conio.h>
#include<chrono>
#include<thread>
using namespace std;

// 地图类
struct Map {
    // 地点结构体
    struct Location {
        string name;  // 地点名称
        // 其他地点信息（例如坐标，介绍等）
    };

    // 路径结构体
    struct Path {
        string from;     // 起点名称
        string to;       // 终点名称
        int distance;    // 距离
        // 其他路径信息（例如道路类型，拥堵情况等）
    };

    vector<Location> locations_;  // 存储所有地点
    vector<Path> paths_;          // 存储所有路径
    int a = 0;

    // 添加地点
    void AddLocation(const string& name, bool &success) {
        // 判断是否已经存在同名的地点
        for (int i = 0; i < locations_.size(); ++i) {
            if (locations_[i].name == name) {
                success = true;
                return;
            }
        }
        Location location;
        location.name = name;
        locations_.push_back(location);
    }

    // 添加路径
    void AddPath(const string& from, const string& to, int distance) {
        Path path;
        path.from = from;
        path.to = to;
        path.distance = distance;
        paths_.push_back(path);
    }

    // 修改边的权值
    void ModifyPath(const string& from, const string& to, int distance) {
        int flag = 0;
        for (int i = 0; i < paths_.size(); ++i) {
            if ((paths_[i].from == from && paths_[i].to == to)|| (paths_[i].from == to && paths_[i].to == from)) {
                paths_[i].distance = distance;
                flag = 1;
                cout << "地图修改成功！" << endl;
                cin.ignore();
                break;
            }
            if (!flag && i == paths_.size() - 1) {
                cout << "请输入正确数据！\n";
                cin.ignore();
            }
        }
    }

    // 清空地图
    void ClearMap() {
        locations_.clear();
        paths_.clear();
        cin.ignore();
    }
    // 删除结点
    void RemoveLocation(const string& name,bool& success) {
        //判断该结点是否存在
        bool flag = false;
        for (int i = 0; i < locations_.size(); ++i) {
            if (locations_[i].name == name) {
                flag = true;
                break;
            }
        }

        if (!flag) {
            cout << "结点 " << name << " 不存在！" << endl;
            cin.ignore();
            success = false;
            return;
        }

        // 删除该结点的所有路径
        for (int i = 0; i < paths_.size();) {
            if (paths_[i].from == name || paths_[i].to == name) {
                paths_.erase(paths_.begin() + i);
            }
            else {
                ++i;
            }
        }

        // 删除该结点
        for (int i = 0; i < locations_.size();) {
            if (locations_[i].name == name) {
                locations_.erase(locations_.begin() + i);//删除结点后，locations_的长度会减一
            }
            else {
                ++i;//为避免遗漏，不可直接使用++i
            }
        }
        cout << "地点" << name << "及相连边已删除。\n";
        cin.ignore();
    }

    // 删除边
    void RemovePath(const string& from, const string& to, bool &success) {
        //判断该路径是否存在
        bool found = false;
        for (int i = 0; i < paths_.size(); ++i) {
            if ((paths_[i].from == from && paths_[i].to == to) || (paths_[i].from == to && paths_[i].to == from)) {
                found = true;
                break;
            }
        }

        if (!found) {
            cout << "路径 " << from << " <---> " << to << " 不存在！" << endl;
            success = false;
            cin.ignore();
            return;
        }
        //删除该路径
        for (int i = 0; i < paths_.size();) {
            if ((paths_[i].from == from && paths_[i].to == to) || (paths_[i].from == to && paths_[i].to == from)) {
                paths_.erase(paths_.begin() + i);
            }
            else {
                ++i;
            }
        }
        cout << "路径 " << from << " <---> " << to << " 已删除。 " << endl;
        cin.ignore();
    }

    // 构建地图
    void BuildMap(const vector<string>& node_names, const vector<vector<int>>& graph, bool &success) {
        // 添加所有的地点
        for (const auto& name : node_names) {
            AddLocation(name, success);
        }

        // 添加所有的路径
        for (int i = 0; i < graph.size(); ++i) {
            for (int j = i + 1; j < graph.size(); ++j) {
                if (graph[i][j] > 0) {
                    AddPath(node_names[i], node_names[j], graph[i][j]);
                }
            }
        }
    }

    // 显示地图信息
    void Display() const {//const使常量成员函数Display()更安全
        cout << "地点列表：" << endl;
        for (const auto& location : locations_) {
            cout << location.name << endl;
        }

        cout << "路径列表：" << endl;
        for (const auto& path : paths_) {
            cout << path.from << " <---> " << path.to << " 距离： " << path.distance << endl;
        }
    }
};

// 输出邻接矩阵
void DisplayAdjMatrix(const vector<string>& nodes, const vector<vector<int>>& graph) {
    // 输出结点名称
    cout << setw(10) << " ";
    for (const auto& node : nodes) {
        cout << setw(10) << node;
    }
    cout << endl;

    // 输出邻接矩阵
    for (int i = 0; i < graph.size(); ++i) {
        cout << setw(10) << nodes[i];
        for (int j = 0; j < graph[i].size(); ++j) {
            cout << setw(10) << graph[i][j];
        }
        cout << endl;
    }
}

// 定义邻接表结构体
struct AdjNode {
    string to;
    int distance;
    AdjNode(const string& t, int d) : to(t), distance(d) {}
};

struct AdjList {
    string from;
    vector<AdjNode> neighbors;
    AdjList(const string& f, const vector<AdjNode>& n) : from(f), neighbors(n) {}
};

// 输出邻接表
void DisplayAdjList(const vector<string>& nodes, const vector<vector<int>>& graph) {
    // 定义邻接表
    vector<AdjList> adj_list;

    // 构造邻接表
    for (int i = 0; i < graph.size(); ++i) {
        vector<AdjNode> neighbors;
        for (int j = 0; j < graph[i].size(); ++j) {
            if (graph[i][j] != 0) {
                neighbors.push_back({ nodes[j], graph[i][j] });
            }
        }
        adj_list.push_back({ nodes[i], neighbors });
    }

    // 输出邻接表
    cout << "邻接表：" << endl;
    for (const auto& l : adj_list) {
        cout << l.from << ": ";
        for (const auto& n : l.neighbors) {
            cout << "(" << n.to << ", " << n.distance << ") ";
        }
        cout << endl;
    }
}


void showMenu()
{
    cout << "╔════════════════════════════════════════════════════╗" << endl;
    cout << "║                 校园导航系统 - 菜单                ║" << endl;
    cout << "╠════════════════════════════════════════════════════╣" << endl;
    cout << "║                                                    ║" << endl;
    cout << "║ 1. 地图的构建                                      ║" << endl;
    cout << "║                                                    ║" << endl;
    cout << "║ 2. 地图修改                                        ║" << endl;
    cout << "║                                                    ║" << endl;
    cout << "║ 3. 地图的删除                                      ║" << endl;
    cout << "║                                                    ║" << endl;
    cout << "║ 4. 输出地图的邻接矩阵                              ║" << endl;
    cout << "║                                                    ║" << endl;
    cout << "║ 5. 输出地图的邻接表                                ║" << endl;
    cout << "║                                                    ║" << endl;
    cout << "║ 6. 从某地点出发，打卡所有点之后后回到起点的经过地点║" << endl;
    cout << "║    序列，并求出所经历的路程                        ║" << endl;
    cout << "║                                                    ║" << endl;
    cout << "║ 7. 从指定点出发，到图中所有点的最短距离及经过的地点║" << endl;
    cout << "║                                                    ║" << endl;
    cout << "║ 8. 从指定起点到指定终点的最短距离，及经过的地点    ║" << endl;
    cout << "║                                                    ║" << endl;
    cout << "║ 9. 输出图中所有两点之间的最短距离                  ║" << endl;
    cout << "║                                                    ║" << endl;
    cout << "║ *. 输出当前地图结点间的信息                        ║" << endl;
    cout << "║                                                    ║" << endl;
    cout << "║ 0. 退出程序                                        ║" << endl;
    cout << "║                                                    ║" << endl;
    cout << "╚════════════════════════════════════════════════════╝" << endl;
}
//以下函数只是过渡语言，实际功能不由它们实现
//1. 地图的构建


//2. 地图修改


//3. 地图的删除
void deleteMap()
{

    cout << "正在删除地图..." << endl;
    cout << endl << "请按下回车键继续...";
    cin.ignore();
}

//4. 输出地图的邻接矩阵 
void Adj_Matrix()
{
    cout << "正在输出邻接矩阵..." << endl;
    cout << endl << "请按下回车键继续...";
    cin.ignore();
}

//5. 输出地图的邻接表
void Adj_List()
{
    cout << "正在输出邻接表..." << endl;
    cout << endl << "请按下回车键继续...";
    cin.ignore();
}

//6.从某地点出发，打卡所有点之后回到起点的经过地点序列，并求出所经历的路程
void each_ergodic()
{
    cout << "请选择出发地点，输入地点名字：\n";
    string name;
    cin >> name;
    cout << "正在从" << name << "出发，打卡所有点之后回到起点，输出所经历的路程...\n";
    cout << endl << "请稍候5秒...";
    this_thread::sleep_for(chrono::seconds(5));
}

//7.从指定点出发，到图中所有点的最短距离及经过的地点
void onetoeach_shortest()
{
    // TODO: 输出从指定点出发，到达图中所有点的最短距离及经过的地点;
    cout << "请选择出发地点，输入地点名字：\n";
    string name;
    cin >> name;
    cout << "正在从"<<name<<"出发，输出到达图中所有点的最短距离及经过的地点..." << endl;
    cout << endl << "请稍候5秒...";
    this_thread::sleep_for(chrono::seconds(5));
}

//8. 从指定起点到指定终点的最短距离，及经过的地点
void doShortestPathQuery()
{
    // TODO: 实现最短路径查询功能,从指定的地点(起点)到达另一指定地点(终点)的最短距离，以及经过的地点;
    cout << "请选择出发地点，输入地点名字：\n";
    string name;
    cin >> name;
    cout << "正在从" << name << "出发，输出到达另一点的最短距离及经过的地点..." << endl;
    cout << endl << "请稍候5秒...";
    this_thread::sleep_for(chrono::seconds(5));
}

//9. 输出图中所有两点之间的最短距离
void each_shortestway()
{
    //输出图中所有两点之间的最短距离
    cout << "正在输出图中所有两点之间的最短距离..." << endl;
    cout << endl << "请按下回车键继续...";
    cin.ignore();
}
int main()
{
    // 无向图的邻接矩阵表示
    vector<string> node_names = { "宿舍", "又康", "GOGO", "隧道口","二饭","教学楼","一饭","门诊楼","图书馆","大会堂","体育场","学术报告厅","实验楼","八角楼","办公楼" };
    vector<vector<int>> graph = {
    {0,210,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {210,0,900,220,0,0,0,0,0,0,0,0,0,0,1500},
    {0,900,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,220,0,0,100,200,60,0,0,0,0,0,0,0,0},
    {0,0,0,100,0,700,0,0,0,0,0,0,0,0,0},
    {0,0,0,200,700,0,400,0,400,0,0,0,200,350,0},
    {0,0,0,60,0,400,0,200,880,0,0,0,0,0,0},
    {0,0,0,0,0,0,200,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,400,880,0,0,80,400,150,0,0,0},
    {0,0,0,0,0,0,0,0,80,0,420,150,0,0,0},
    {0,0,0,0,0,0,0,0,400,420,0,500,0,0,0},
    {0,0,0,0,0,0,0,0,150,150,500,0,150,0,0},
    {0,0,0,0,0,200,0,0,0,0,0,150,0,300,270},
    {0,0,0,0,0,350,0,0,0,0,0,0,300,0,80},
    {0,1000,0,0,0,0,0,0,0,0,0,0,270,80,0}, };

    // 构建地图
    Map map;
    

    // 显示地图信息

    // 添加新的结点
    //map.AddLocation("308");

    // 添加新的边
    //map.AddPath("宿舍", "308", 666);

    // 修改边的权值
    //map.ModifyPath("体育馆", "图书馆", 2);

    // 删除结点
    //map.RemoveLocation("宿舍楼");

    // 删除边
    //map.RemovePath("体育馆", "图书馆");

    // 再次显示地图信息
    //map.Display();

    char ch;
    bool quit = false;

    while (!quit)
    {
        showMenu();
        string name1, name2;//结点名字
        int length;//权值
        int num = 0;//选择操作用
        bool success1 = false, success2 = false,success = false;//分别为name1,name2的引用参数
        cout << "请选择您要进行的操作序号：\n";
        ch = _getch(); // 获取按键输入
        cout << "您选择了操作" << ch << "。\n";
        switch (ch)
        {
        case '1'://1. 地图的构建
            cout << "正在构建地图...\n";
            map.BuildMap(node_names, graph, success);
            cout << "地图构建成功！" << endl;
            cout << "请按下回车键继续..." << endl;
            cin.ignore();
            break;


        case '2'://2. 地图修改
            cout << "请问您想要增加新的结点、边关系，还是对某一条边的权值进行修改？前者请按1，后者请按2。\n";        
            cin >> num;
            if (num == 1) {
                cout << "请输入您想要加入的地点信息，分别输入新地点的名字，与该点相邻的另一地点的名字，这两点间的距离。\n";
                cin >> name1 >> name2 >> length;
                cout << "正在修改地图..." << endl;
                map.AddLocation(name1,success1);
                map.AddLocation(name2,success2);
                if (success1 && !success2) {
                    cin.ignore();
                    cout << "地点 " << name1 << " 已经存在！" << endl;
                    cout << "地点 " << name2 << " 暂不存在！" << endl;
                    cout << "地图修改失败！" << endl;
                    //map.RemoveLocation(name1, success1);
                    //map.RemoveLocation(name2, success2);
                    cout << "请按下回车键继续..." << endl;
                    cin.ignore();
                    break;
                }
                if (success1) {
                    cin.ignore();
                    cout << "地点 " << name1 << " 已经存在！" << endl;
                    cout << "地图修改失败！" << endl;
                    //map.RemoveLocation(name1, success1);
                    cout << "请按下回车键继续..." << endl;
                    cin.ignore();
                    break;
                }
                if (!success2) {
                    cin.ignore();
                    cout << "地点 " << name2 << " 暂不存在！" << endl;
                    cout << "地图修改失败！" << endl;
                    //map.RemoveLocation(name2, success2);
                    cout << "请按下回车键继续..." << endl;
                    cin.ignore();
                    break;
                }
                map.AddPath(name1, name2, length);
                cin.ignore();
                cout << "地图修改成功！" << endl;
                cout << "请按下回车键继续..." << endl;
                cin.ignore();
            }
            else if (num == 2) {
                cout << "请输入您要修改的边的一段地点名字，另一端地点名字，修改后的权值。\n";
                cin >> name1 >> name2 >> length;
                cout << "正在修改地图..." << endl;
                map.ModifyPath(name1, name2, length);
                cout << "请按下回车键继续..." << endl;
                cin.ignore();
            }
            else
            {
                cin.ignore();
                cout << "请输入的正确指令！\n";
                cout << "请按下回车键继续..." << endl;
                cin.ignore();
            }


            name1 = "", name2 = "", length = 0, success1 = false, success2 = false, success = false;//记得重新初始化
            break;


        case '3'://3. 地图的删除
            cout << "请输入您要执行的操作，删除已有所有信息请按1，删除某一结点请按2，删除某一边请按3。\n";
            cin >> num;
            if (num == 1) {
                map.ClearMap();
                cout << "地图信息已清空！\n";
            }
            else if (num == 2) {
                cout << "请输入要删除的地点名字:\n";
                cin >> name1;
                map.RemoveLocation(name1,success);
            }
            else if (num == 3) {
                cout << "请输入要删除边的两端地点名字:\n";
                cin >> name1 >> name2;
                map.RemovePath(name1, name2, success);
            }
            else {
                cin.ignore();
                cout << "请输入的正确指令！\n";
            }
            cout << "请按下回车键继续..." << endl;
            cin.ignore();
            name1 = "", name2 = "", length = 0, success1 = false, success2 = false, success = false;
            
            break;


        case '4'://4. 输出地图的邻接矩阵 
            // 输出邻接矩阵
            DisplayAdjMatrix(node_names, graph);
            cout << endl;
            cout << "请按下回车键继续..." << endl;
            cin.ignore();
            break;


        case '5'://5. 输出地图的邻接表

            // 输出邻接表
            DisplayAdjList(node_names, graph);
            Adj_List();
            break;


        case '6'://6.从某地点出发，打卡所有点之后回到起点的经过地点序列，并求出所经历的路程
            each_ergodic();
            break;


        case '7'://7.从指定点出发，到图中所有点的最短距离及经过的地点
            onetoeach_shortest();
            break;


        case '8'://8. 从指定起点到指定终点的最短距离，及经过的地点
            doShortestPathQuery();
            break;


        case '9'://9. 输出图中所有两点之间的最短距离
            each_shortestway();
            break;


        case '*':
            map.Display();
            cout  << "请按下回车键继续..." << endl;
            cin.ignore();
            break;


        case '0':
            quit = true;
            break;


        case 27: // ESC键
            quit = true;
            break;


        default:
            break;
        }
    }
    return 0;
}
